2024-08-02 17:24:40,424 - __main__ - INFO - Reading traces from /Users/xuboyu/ml-daikon/mldaikon/invariant/_ml_daikon_run_image_classification_mldaikon_trace_API_2024-07-17_14-23-29_103459.log
2024-08-02 17:24:41,241 - mldaikon.trace.trace - INFO - Done reading /Users/xuboyu/ml-daikon/mldaikon/invariant/_ml_daikon_run_image_classification_mldaikon_trace_API_2024-07-17_14-23-29_103459.log
2024-08-02 17:24:41,241 - mldaikon.trace.trace - INFO - Concatenating the DataFrames
2024-08-02 17:24:41,241 - mldaikon.trace.trace - INFO - Done concatenating the DataFrames
2024-08-02 17:24:41,241 - mldaikon.trace.trace - INFO - Unnesting all columns in the DataFrame.
2024-08-02 17:24:41,243 - mldaikon.trace.trace - INFO - Done unnesting all columns in the DataFrame.
2024-08-02 17:24:41,243 - mldaikon.trace.trace - WARNING - Infer engine won't sort the events by time anymore as sorting is costly for large traces. Please make sure every separate file is sorted by time, and traces belong to the same process should be in the same file. For variable traces, we will still be sorting them by time so no need to worry about that.
2024-08-02 17:24:41,243 - mldaikon.trace.trace - INFO - Truncating incomplete trailing function calls from the trace.
2024-08-02 17:24:41,338 - mldaikon.trace.trace - INFO - Done truncating incomplete trailing function calls from the trace.
2024-08-02 17:24:41,338 - __main__ - INFO - Traces read successfully in 0.9136841297149658 seconds.
2024-08-02 17:24:41,338 - __main__ - INFO - Infering invariants for relation: FunctionCoverRelation
2024-08-02 17:26:07,306 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.to'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.nn.modules.module.Module.to
2024-08-02 17:26:07,306 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 1
2024-08-02 17:26:07,306 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,306 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.to'):
None
2024-08-02 17:26:07,306 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.to')
2024-08-02 17:26:07,306 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.optim.lr_scheduler.LRScheduler.step'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.optim.lr_scheduler.LRScheduler.step
2024-08-02 17:26:07,306 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 1
2024-08-02 17:26:07,307 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.optim.lr_scheduler.LRScheduler.step'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: is_bound_method, Type: PreconditionClauseType.CONSTANT, Values: {False}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.adamw'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,307 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.zero_grad'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.nn.modules.module.Module.zero_grad
2024-08-02 17:26:07,307 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 1
2024-08-02 17:26:07,307 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.zero_grad'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: is_bound_method, Type: PreconditionClauseType.CONSTANT, Values: {False}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.adamw'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,307 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.add_module'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.nn.modules.module.Module.add_module
2024-08-02 17:26:07,307 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 12
2024-08-02 17:26:07,308 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,308 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.add_module'):
None
2024-08-02 17:26:07,308 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.add_module')
2024-08-02 17:26:07,308 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.optim.optimizer.Optimizer.add_param_group'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.optim.optimizer.Optimizer.add_param_group
2024-08-02 17:26:07,308 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 2
2024-08-02 17:26:07,308 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,308 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.optim.optimizer.Optimizer.add_param_group'):
None
2024-08-02 17:26:07,308 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.optim.adamw.adamw', 'torch.optim.optimizer.Optimizer.add_param_group')
2024-08-02 17:26:07,308 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.train'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.nn.modules.module.Module.train
2024-08-02 17:26:07,308 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 4522
2024-08-02 17:26:07,322 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.train'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: is_bound_method, Type: PreconditionClauseType.CONSTANT, Values: {False}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.adamw'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,322 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.named_parameters'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.nn.modules.module.Module.named_parameters
2024-08-02 17:26:07,322 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 90
2024-08-02 17:26:07,323 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.named_parameters'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: is_bound_method, Type: PreconditionClauseType.CONSTANT, Values: {False}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.adamw'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,323 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.eval'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.nn.modules.module.Module.eval
2024-08-02 17:26:07,323 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 2
2024-08-02 17:26:07,323 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.nn.modules.module.Module.eval'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: is_bound_method, Type: PreconditionClauseType.CONSTANT, Values: {False}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.adamw'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,323 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,323 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 1
2024-08-02 17:26:07,324 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: is_bound_method, Type: PreconditionClauseType.CONSTANT, Values: {False}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.adamw'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,324 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.adamw', 'torch.autograd.backward'): FunctionCoverRelation between torch.optim.adamw.adamw and torch.autograd.backward
2024-08-02 17:26:07,324 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 16, 
# negative examples: 1
2024-08-02 17:26:07,324 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.adamw', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.adamw'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,324 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.optim.adamw.AdamW.step'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.optim.adamw.AdamW.step
2024-08-02 17:26:07,324 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 16
2024-08-02 17:26:07,325 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.optim.adamw.AdamW.step'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,325 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.optim.lr_scheduler.LRScheduler.step'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.optim.lr_scheduler.LRScheduler.step
2024-08-02 17:26:07,325 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 17
2024-08-02 17:26:07,325 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.optim.lr_scheduler.LRScheduler.step'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,325 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.zero_grad'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.nn.modules.module.Module.zero_grad
2024-08-02 17:26:07,325 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 17
2024-08-02 17:26:07,325 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.zero_grad'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,325 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.add_module'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.nn.modules.module.Module.add_module
2024-08-02 17:26:07,325 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 12
2024-08-02 17:26:07,326 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,326 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.add_module'):
None
2024-08-02 17:26:07,326 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.add_module')
2024-08-02 17:26:07,326 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.optim.optimizer.Optimizer.add_param_group'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.optim.optimizer.Optimizer.add_param_group
2024-08-02 17:26:07,326 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 1
2024-08-02 17:26:07,326 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.optim.optimizer.Optimizer.add_param_group'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,326 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.train'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.nn.modules.module.Module.train
2024-08-02 17:26:07,326 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 4538
2024-08-02 17:26:07,340 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.train'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,340 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.named_parameters'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.nn.modules.module.Module.named_parameters
2024-08-02 17:26:07,340 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 106
2024-08-02 17:26:07,341 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.named_parameters'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,341 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.eval'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.nn.modules.module.Module.eval
2024-08-02 17:26:07,341 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 2
2024-08-02 17:26:07,341 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.nn.modules.module.Module.eval'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,341 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,342 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 17
2024-08-02 17:26:07,342 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,342 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.to', 'torch.autograd.backward'): FunctionCoverRelation between torch.nn.modules.module.Module.to and torch.autograd.backward
2024-08-02 17:26:07,342 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 16
2024-08-02 17:26:07,342 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.to', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.to'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,342 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.optim.lr_scheduler.LRScheduler.step'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.optim.lr_scheduler.LRScheduler.step
2024-08-02 17:26:07,342 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 1
2024-08-02 17:26:07,343 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.optim.lr_scheduler.LRScheduler.step'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.AdamW.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,343 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.zero_grad'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.nn.modules.module.Module.zero_grad
2024-08-02 17:26:07,343 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 1
2024-08-02 17:26:07,343 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.zero_grad'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.AdamW.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,343 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.add_module'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.nn.modules.module.Module.add_module
2024-08-02 17:26:07,343 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 12
2024-08-02 17:26:07,343 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,344 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.add_module'):
None
2024-08-02 17:26:07,344 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.add_module')
2024-08-02 17:26:07,344 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.optim.optimizer.Optimizer.add_param_group'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.optim.optimizer.Optimizer.add_param_group
2024-08-02 17:26:07,344 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 2
2024-08-02 17:26:07,344 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,344 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.optim.optimizer.Optimizer.add_param_group'):
None
2024-08-02 17:26:07,344 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.optim.adamw.AdamW.step', 'torch.optim.optimizer.Optimizer.add_param_group')
2024-08-02 17:26:07,344 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.train'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.nn.modules.module.Module.train
2024-08-02 17:26:07,344 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 4522
2024-08-02 17:26:07,359 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.train'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.AdamW.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,359 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.named_parameters'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.nn.modules.module.Module.named_parameters
2024-08-02 17:26:07,359 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 90
2024-08-02 17:26:07,360 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.named_parameters'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.AdamW.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,360 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.eval'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.nn.modules.module.Module.eval
2024-08-02 17:26:07,360 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 2
2024-08-02 17:26:07,360 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.nn.modules.module.Module.eval'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.AdamW.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,360 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,360 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 1
2024-08-02 17:26:07,360 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.AdamW.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,360 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.adamw.AdamW.step', 'torch.autograd.backward'): FunctionCoverRelation between torch.optim.adamw.AdamW.step and torch.autograd.backward
2024-08-02 17:26:07,360 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 16, 
# negative examples: 1
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.adamw.AdamW.step', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.adamw.AdamW.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.zero_grad'): FunctionCoverRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.zero_grad
2024-08-02 17:26:07,361 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 18, 
# negative examples: 0
2024-08-02 17:26:07,361 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.zero_grad'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.add_module'): FunctionCoverRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.add_module
2024-08-02 17:26:07,361 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 12
2024-08-02 17:26:07,361 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.add_module'):
None
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.add_module')
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.optim.optimizer.Optimizer.add_param_group'): FunctionCoverRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.optim.optimizer.Optimizer.add_param_group
2024-08-02 17:26:07,361 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 2
2024-08-02 17:26:07,361 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.optim.optimizer.Optimizer.add_param_group'):
None
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.optim.optimizer.Optimizer.add_param_group')
2024-08-02 17:26:07,361 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.train'): FunctionCoverRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.train
2024-08-02 17:26:07,362 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 18, 
# negative examples: 4521
2024-08-02 17:26:07,376 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.train'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530205684304}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.lr_scheduler.LRScheduler.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,376 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.named_parameters'): FunctionCoverRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.named_parameters
2024-08-02 17:26:07,376 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 18, 
# negative examples: 89
2024-08-02 17:26:07,376 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.named_parameters'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530205684304}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.lr_scheduler.LRScheduler.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.eval'): FunctionCoverRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.nn.modules.module.Module.eval
2024-08-02 17:26:07,377 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 2
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.nn.modules.module.Module.eval'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530205684304}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.lr_scheduler.LRScheduler.step'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.autograd.backward'): FunctionCoverRelation between torch.optim.lr_scheduler.LRScheduler.step and torch.autograd.backward
2024-08-02 17:26:07,377 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 0
2024-08-02 17:26:07,377 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.lr_scheduler.LRScheduler.step', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.zero_grad', 'torch.nn.modules.module.Module.add_module'): FunctionCoverRelation between torch.nn.modules.module.Module.zero_grad and torch.nn.modules.module.Module.add_module
2024-08-02 17:26:07,377 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 12
2024-08-02 17:26:07,377 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.zero_grad', 'torch.nn.modules.module.Module.add_module'):
None
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.nn.modules.module.Module.zero_grad', 'torch.nn.modules.module.Module.add_module')
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.zero_grad', 'torch.optim.optimizer.Optimizer.add_param_group'): FunctionCoverRelation between torch.nn.modules.module.Module.zero_grad and torch.optim.optimizer.Optimizer.add_param_group
2024-08-02 17:26:07,377 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 0, 
# negative examples: 2
2024-08-02 17:26:07,377 - Precondition - DEBUG - No partial preconditions found, cannot infer further
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.zero_grad', 'torch.optim.optimizer.Optimizer.add_param_group'):
None
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Precondition not found for ('torch.nn.modules.module.Module.zero_grad', 'torch.optim.optimizer.Optimizer.add_param_group')
2024-08-02 17:26:07,377 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.zero_grad', 'torch.nn.modules.module.Module.train'): FunctionCoverRelation between torch.nn.modules.module.Module.zero_grad and torch.nn.modules.module.Module.train
2024-08-02 17:26:07,378 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 18, 
# negative examples: 4521
2024-08-02 17:26:07,392 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.zero_grad', 'torch.nn.modules.module.Module.train'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208795600}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.zero_grad'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,392 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.zero_grad', 'torch.nn.modules.module.Module.eval'): FunctionCoverRelation between torch.nn.modules.module.Module.zero_grad and torch.nn.modules.module.Module.eval
2024-08-02 17:26:07,392 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 2
2024-08-02 17:26:07,392 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.zero_grad', 'torch.nn.modules.module.Module.eval'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208795600}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.zero_grad'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,392 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.zero_grad', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.nn.modules.module.Module.zero_grad and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,392 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 1
2024-08-02 17:26:07,393 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.zero_grad', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208795600}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.zero_grad'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,393 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.zero_grad', 'torch.autograd.backward'): FunctionCoverRelation between torch.nn.modules.module.Module.zero_grad and torch.autograd.backward
2024-08-02 17:26:07,393 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 0
2024-08-02 17:26:07,393 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,393 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.zero_grad', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,393 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.add_module', 'torch.optim.optimizer.Optimizer.add_param_group'): FunctionCoverRelation between torch.nn.modules.module.Module.add_module and torch.optim.optimizer.Optimizer.add_param_group
2024-08-02 17:26:07,393 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 1
2024-08-02 17:26:07,393 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.add_module', 'torch.optim.optimizer.Optimizer.add_param_group'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.add_module'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208171984}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,393 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.add_module', 'torch.nn.modules.module.Module.train'): FunctionCoverRelation between torch.nn.modules.module.Module.add_module and torch.nn.modules.module.Module.train
2024-08-02 17:26:07,393 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 4538
2024-08-02 17:26:07,407 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.add_module', 'torch.nn.modules.module.Module.train'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.add_module'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208171984}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,407 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.add_module', 'torch.nn.modules.module.Module.named_parameters'): FunctionCoverRelation between torch.nn.modules.module.Module.add_module and torch.nn.modules.module.Module.named_parameters
2024-08-02 17:26:07,407 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 106
2024-08-02 17:26:07,408 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.add_module', 'torch.nn.modules.module.Module.named_parameters'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.add_module'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208171984}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,408 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.add_module', 'torch.nn.modules.module.Module.eval'): FunctionCoverRelation between torch.nn.modules.module.Module.add_module and torch.nn.modules.module.Module.eval
2024-08-02 17:26:07,408 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 2
2024-08-02 17:26:07,408 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.add_module', 'torch.nn.modules.module.Module.eval'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.add_module'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208171984}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,408 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.add_module', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.nn.modules.module.Module.add_module and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,408 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 17
2024-08-02 17:26:07,409 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.add_module', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.add_module'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208171984}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,409 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.add_module', 'torch.autograd.backward'): FunctionCoverRelation between torch.nn.modules.module.Module.add_module and torch.autograd.backward
2024-08-02 17:26:07,409 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 16
2024-08-02 17:26:07,409 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.add_module', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.add_module'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208171984}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,409 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.nn.modules.module.Module.train'): FunctionCoverRelation between torch.optim.optimizer.Optimizer.add_param_group and torch.nn.modules.module.Module.train
2024-08-02 17:26:07,409 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 4538
2024-08-02 17:26:07,423 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.nn.modules.module.Module.train'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.optimizer.Optimizer.add_param_group'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,423 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.nn.modules.module.Module.named_parameters'): FunctionCoverRelation between torch.optim.optimizer.Optimizer.add_param_group and torch.nn.modules.module.Module.named_parameters
2024-08-02 17:26:07,423 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 106
2024-08-02 17:26:07,423 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.nn.modules.module.Module.named_parameters'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.optimizer.Optimizer.add_param_group'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,423 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.nn.modules.module.Module.eval'): FunctionCoverRelation between torch.optim.optimizer.Optimizer.add_param_group and torch.nn.modules.module.Module.eval
2024-08-02 17:26:07,424 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 2
2024-08-02 17:26:07,424 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.nn.modules.module.Module.eval'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.optimizer.Optimizer.add_param_group'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,424 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.optim.optimizer.Optimizer.add_param_group and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,424 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 17
2024-08-02 17:26:07,424 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.optimizer.Optimizer.add_param_group'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,424 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.autograd.backward'): FunctionCoverRelation between torch.optim.optimizer.Optimizer.add_param_group and torch.autograd.backward
2024-08-02 17:26:07,424 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 16
2024-08-02 17:26:07,424 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.optimizer.Optimizer.add_param_group', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.optim.optimizer.Optimizer.add_param_group'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530206010128}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,424 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.train', 'torch.nn.modules.module.Module.named_parameters'): FunctionCoverRelation between torch.nn.modules.module.Module.train and torch.nn.modules.module.Module.named_parameters
2024-08-02 17:26:07,425 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 20, 
# negative examples: 87
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.train', 'torch.nn.modules.module.Module.named_parameters'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208173840}
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.train'}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.train', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.nn.modules.module.Module.train and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,425 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 18, 
# negative examples: 0
2024-08-02 17:26:07,425 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.train', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.train', 'torch.autograd.backward'): FunctionCoverRelation between torch.nn.modules.module.Module.train and torch.autograd.backward
2024-08-02 17:26:07,425 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 0
2024-08-02 17:26:07,425 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.train', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.named_parameters', 'torch.nn.modules.module.Module.eval'): FunctionCoverRelation between torch.nn.modules.module.Module.named_parameters and torch.nn.modules.module.Module.eval
2024-08-02 17:26:07,425 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 3, 
# negative examples: 0
2024-08-02 17:26:07,425 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.named_parameters', 'torch.nn.modules.module.Module.eval'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.named_parameters', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.nn.modules.module.Module.named_parameters and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,425 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 18, 
# negative examples: 0
2024-08-02 17:26:07,425 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.named_parameters', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,425 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.named_parameters', 'torch.autograd.backward'): FunctionCoverRelation between torch.nn.modules.module.Module.named_parameters and torch.autograd.backward
2024-08-02 17:26:07,425 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 0
2024-08-02 17:26:07,426 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,426 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.named_parameters', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,426 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.eval', 'torch.optim.lr_scheduler.LambdaLR.get_lr'): FunctionCoverRelation between torch.nn.modules.module.Module.eval and torch.optim.lr_scheduler.LambdaLR.get_lr
2024-08-02 17:26:07,426 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 17
2024-08-02 17:26:07,426 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.eval', 'torch.optim.lr_scheduler.LambdaLR.get_lr'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.eval'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,426 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.nn.modules.module.Module.eval', 'torch.autograd.backward'): FunctionCoverRelation between torch.nn.modules.module.Module.eval and torch.autograd.backward
2024-08-02 17:26:07,426 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 1, 
# negative examples: 16
2024-08-02 17:26:07,426 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.nn.modules.module.Module.eval', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
** Start of Precondition **
Prop: function, Type: PreconditionClauseType.CONSTANT, Values: {'torch.nn.modules.module.Module.eval'}
Prop: obj_id, Type: PreconditionClauseType.CONSTANT, Values: {140530208790096}
** End of Preconditions **
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,426 - mldaikon.invariant.cover_relation - DEBUG - Finding Precondition for ('torch.optim.lr_scheduler.LambdaLR.get_lr', 'torch.autograd.backward'): FunctionCoverRelation between torch.optim.lr_scheduler.LambdaLR.get_lr and torch.autograd.backward
2024-08-02 17:26:07,426 - Precondition - DEBUG - Calling precondition inference with 
# positive examples: 17, 
# negative examples: 0
2024-08-02 17:26:07,426 - Precondition - WARNING - No negative examples found, assigning unconditional precondition
2024-08-02 17:26:07,426 - mldaikon.invariant.cover_relation - DEBUG - Preconditions for ('torch.optim.lr_scheduler.LambdaLR.get_lr', 'torch.autograd.backward'):
====================== Start of Grouped Precondition ======================
Group: func
Unconditional Precondition
====================== End of Grouped Precondition ======================
2024-08-02 17:26:07,435 - __main__ - INFO - Found 52 invariants for relation: FunctionCoverRelation
2024-08-02 17:26:07,435 - __main__ - INFO - Found 52 invariants.
2024-08-02 17:26:07,435 - __main__ - INFO - Inference completed in 86.09756112098694 seconds.
